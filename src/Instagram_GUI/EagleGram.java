package Instagram_GUI;

import Background_Code.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.image.*;
import java.io.*;
import javax.imageio.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.border.Border;

/**
 * This class creates the main GUI to which the user will interface
 *
 * @author Jose
 */
public class EagleGram extends javax.swing.JFrame {

    /**
     * Constructor to the EagleGram class
     *
     * @param loggedIn the current user that is logged in
     */
    public EagleGram(RealProfile loggedIn) {
        mainWindow = this;
        initComponents();
        this.setTitle("EagleGram");
        this.setLocation(width, height);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        main.logIn(loggedIn.getUsername(), loggedIn.getPassword());

        try {
            ImageIcon emptyPicture = new ImageIcon(scaleImage(
                    100, 23, ImageIO.read(new File(imagesDir
                            + "EagleGramTransparent.png"))));
            eagleGramLabel.setIcon(emptyPicture);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        profilePictureLabel.setIcon(main.getLoggedIn().getProfilePic());
        firstnameLabel.setText(main.getLoggedIn().getFirstName());
        lastnameLabel.setText(main.getLoggedIn().getLastName());
        usernameLabel.setText(main.getLoggedIn().getUsername());

        ArrayList<Post> feed = main.updateFeed();
        for (int i = 0; i < feed.size(); i++) {
            RealProfile lookingAt = null;
            for (int x = 0; x < main.getLoggedIn().getFollowing().size(); x++) {
                for (int j = 0; j
                        < main.getLoggedIn().getFollowing().get(x).getPosts()
                                .size(); j++) {
                    if (main.getLoggedIn().getFollowing().get(x).getPosts()
                            .get(j).getCaption()
                            .equals(feed.get(i).getCaption())) {
                        lookingAt = main.getLoggedIn().getFollowing().get(x);
                        break;
                    }
                }
            }
            feedPanel.add(new UserPanel(feed.get(i).getImage(),
                    feed.get(i).getCaption(), feed.get(i).getDate(),
                    feed.get(i).getLikes(), i, lookingAt));
            feedPanel.revalidate();
            feedPanel.repaint();
        }

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                String objButtons[] = {"Yes", "No"};
                int promptResult = JOptionPane.showOptionDialog(null,
                        "Are you sure you want to exit?", "Warning Message",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, objButtons, objButtons[1]);
                if (promptResult == JOptionPane.YES_OPTION) {
                    main.close();
                    System.exit(0);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottomMenu = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        newPostButton = new javax.swing.JButton();
        notificationsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        topMenu = new javax.swing.JPanel();
        dmButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        eagleGramLabel = new javax.swing.JLabel();
        mainWindowScrollPane = new javax.swing.JScrollPane();
        mainWindowLayoutPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        feedPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchParameterPanel = new javax.swing.JPanel();
        searchParameter = new javax.swing.JComboBox();
        userInput = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchOutputPanel = new javax.swing.JPanel();
        newPostPanel = new javax.swing.JPanel();
        uploadPictureButton = new javax.swing.JButton();
        uploadedPictureLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        captionField = new javax.swing.JTextArea();
        commentLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tagedPeopleField = new javax.swing.JTextArea();
        tagedPeopleLabel = new javax.swing.JLabel();
        hashTagsLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        hashTagsField = new javax.swing.JTextArea();
        createNewPostButton = new javax.swing.JButton();
        newPostOutputLabel = new javax.swing.JLabel();
        notificationPanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        notificationOutputPanel = new javax.swing.JPanel();
        profilePanel = new javax.swing.JPanel();
        staticProfilePanel = new javax.swing.JPanel();
        profilePictureLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        firstnameLabel = new javax.swing.JLabel();
        lastnameLabel = new javax.swing.JLabel();
        numberFollowersLabel = new javax.swing.JLabel();
        numberFollowingLabel = new javax.swing.JLabel();
        followButton = new javax.swing.JButton();
        userPostScrollPane = new javax.swing.JScrollPane();
        userPostPanel = new javax.swing.JPanel();
        dmPanel = new javax.swing.JPanel();
        dmMenuPanel = new javax.swing.JPanel();
        newMessageButton = new javax.swing.JButton();
        inboxButton = new javax.swing.JButton();
        sentButton = new javax.swing.JButton();
        dmLayoutPanel = new javax.swing.JPanel();
        inboxPanel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        inboxOutputPanel = new javax.swing.JPanel();
        sentPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        sentsPanel = new javax.swing.JPanel();
        newMessagePanel = new javax.swing.JPanel();
        contactUsernameLabel = new javax.swing.JLabel();
        contactUsernameField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageField = new javax.swing.JTextArea();
        messageLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        messageOutputLabel = new javax.swing.JLabel();
        dmPhotoButton = new javax.swing.JButton();
        dmPhotoLabel = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        changeFirstnameLabel = new javax.swing.JLabel();
        changeFirstnameField = new javax.swing.JTextField();
        changeFirstnameButton = new javax.swing.JButton();
        changeLastnameLabel = new javax.swing.JLabel();
        changeLastnameField = new javax.swing.JTextField();
        changeLastnameButton = new javax.swing.JButton();
        changePasswordLabel = new javax.swing.JLabel();
        currentPasswordLabel = new javax.swing.JLabel();
        privateAccoutLabel = new javax.swing.JLabel();
        privateAccountCheckBox = new javax.swing.JCheckBox();
        privateAccountButton = new javax.swing.JButton();
        currentPasswordField = new javax.swing.JPasswordField();
        newPasswordField1 = new javax.swing.JPasswordField();
        newPasswordField2 = new javax.swing.JPasswordField();
        newPasswordLabel1 = new javax.swing.JLabel();
        newPasswordLabel2 = new javax.swing.JLabel();
        changePasswordButton = new javax.swing.JButton();
        signOutButton = new javax.swing.JButton();
        privateAccoutOutputLabel = new javax.swing.JLabel();
        changeFirstnameOutputLabel = new javax.swing.JLabel();
        changeLastnameOutputLabel = new javax.swing.JLabel();
        passwordOutputLabel = new javax.swing.JLabel();
        changeProfilePhotoButton = new javax.swing.JButton();
        changeProfilePictureLabel = new javax.swing.JLabel();
        commitPhotoChangeButton = new javax.swing.JButton();
        changeProfilePictureOutputLabel = new javax.swing.JLabel();
        clearNotificationsButton = new javax.swing.JButton();
        clearInboxButton = new javax.swing.JButton();
        clearSentsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        newPostButton.setText("New Post");
        newPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPostButtonActionPerformed(evt);
            }
        });

        notificationsButton.setText("Notifcations");
        notificationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notificationsButtonActionPerformed(evt);
            }
        });

        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bottomMenuLayout = new javax.swing.GroupLayout(bottomMenu);
        bottomMenu.setLayout(bottomMenuLayout);
        bottomMenuLayout.setHorizontalGroup(
            bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomMenuLayout.createSequentialGroup()
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(newPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(notificationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(profileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bottomMenuLayout.setVerticalGroup(
            bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomMenuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(searchButton)
                    .addComponent(newPostButton)
                    .addComponent(notificationsButton)
                    .addComponent(profileButton)))
        );

        homeButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        searchButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        newPostButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        notificationsButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        profileButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        dmButton.setText("DM");
        dmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dmButtonActionPerformed(evt);
            }
        });

        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topMenuLayout = new javax.swing.GroupLayout(topMenu);
        topMenu.setLayout(topMenuLayout);
        topMenuLayout.setHorizontalGroup(
            topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topMenuLayout.createSequentialGroup()
                .addComponent(dmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(eagleGramLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        topMenuLayout.setVerticalGroup(
            topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eagleGramLabel)
            .addGroup(topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(dmButton)
                .addComponent(settingsButton))
        );

        dmButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        settingsButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        mainWindowLayoutPanel.setMaximumSize(new java.awt.Dimension(536, 466));
        mainWindowLayoutPanel.setPreferredSize(new java.awt.Dimension(536, 466));
        mainWindowLayoutPanel.setLayout(new java.awt.CardLayout());

        homePanel.setMaximumSize(new java.awt.Dimension(536, 466));
        homePanel.setMinimumSize(new java.awt.Dimension(536, 466));
        homePanel.setPreferredSize(new java.awt.Dimension(536, 466));

        javax.swing.GroupLayout feedPanelLayout = new javax.swing.GroupLayout(feedPanel);
        feedPanel.setLayout(feedPanelLayout);
        feedPanelLayout.setHorizontalGroup(
            feedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );
        feedPanelLayout.setVerticalGroup(
            feedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jScrollPane8.setViewportView(feedPanel);
        feedPanel.setLayout(new BoxLayout(feedPanel, BoxLayout.Y_AXIS));

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        mainWindowLayoutPanel.add(homePanel, "card6");

        searchPanel.setMaximumSize(new java.awt.Dimension(536, 466));
        searchPanel.setPreferredSize(new java.awt.Dimension(536, 466));

        searchParameter.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
            "Username", "Hash Tags", "People Tagged"}));

searchButton1.setText("Search");
searchButton1.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        searchButton1ActionPerformed(evt);
    }
    });

    javax.swing.GroupLayout searchParameterPanelLayout = new javax.swing.GroupLayout(searchParameterPanel);
    searchParameterPanel.setLayout(searchParameterPanelLayout);
    searchParameterPanelLayout.setHorizontalGroup(
        searchParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchParameterPanelLayout.createSequentialGroup()
            .addComponent(searchParameter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
            .addComponent(searchButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
    );
    searchParameterPanelLayout.setVerticalGroup(
        searchParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(searchParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(searchButton1))
    );

    searchButton1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

    javax.swing.GroupLayout searchOutputPanelLayout = new javax.swing.GroupLayout(searchOutputPanel);
    searchOutputPanel.setLayout(searchOutputPanelLayout);
    searchOutputPanelLayout.setHorizontalGroup(
        searchOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );
    searchOutputPanelLayout.setVerticalGroup(
        searchOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );

    jScrollPane2.setViewportView(searchOutputPanel);
    searchOutputPanel.setLayout(new BoxLayout(searchOutputPanel, BoxLayout.Y_AXIS));

    javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
    searchPanel.setLayout(searchPanelLayout);
    searchPanelLayout.setHorizontalGroup(
        searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(searchParameterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPane2)
    );
    searchPanelLayout.setVerticalGroup(
        searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchPanelLayout.createSequentialGroup()
            .addComponent(searchParameterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
    );

    mainWindowLayoutPanel.add(searchPanel, "card3");

    newPostPanel.setMaximumSize(new java.awt.Dimension(536, 466));

    uploadPictureButton.setText("Upload Picture");
    uploadPictureButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            uploadPictureButtonActionPerformed(evt);
        }
    });

    captionField.setColumns(20);
    captionField.setRows(5);
    jScrollPane4.setViewportView(captionField);

    commentLabel.setText("Enter your Comment:");

    tagedPeopleField.setColumns(20);
    tagedPeopleField.setRows(5);
    jScrollPane5.setViewportView(tagedPeopleField);

    tagedPeopleLabel.setText("Tag People:");

    hashTagsLabel.setText("Enter HashTags(if any):");

    hashTagsField.setColumns(20);
    hashTagsField.setRows(5);
    jScrollPane6.setViewportView(hashTagsField);

    createNewPostButton.setText("Create New Post");
    createNewPostButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            createNewPostButtonActionPerformed(evt);
        }
    });

    newPostOutputLabel.setPreferredSize(new java.awt.Dimension(516, 21));

    javax.swing.GroupLayout newPostPanelLayout = new javax.swing.GroupLayout(newPostPanel);
    newPostPanel.setLayout(newPostPanelLayout);
    newPostPanelLayout.setHorizontalGroup(
        newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(newPostPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(newPostOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(newPostPanelLayout.createSequentialGroup()
                    .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(newPostPanelLayout.createSequentialGroup()
                            .addComponent(tagedPeopleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(newPostPanelLayout.createSequentialGroup()
                            .addComponent(commentLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(newPostPanelLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(createNewPostButton)
                            .addGap(28, 28, 28))
                        .addGroup(newPostPanelLayout.createSequentialGroup()
                            .addComponent(hashTagsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(newPostPanelLayout.createSequentialGroup()
                            .addComponent(uploadPictureButton)
                            .addGap(19, 19, 19))
                        .addComponent(uploadedPictureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addContainerGap())
    );
    newPostPanelLayout.setVerticalGroup(
        newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(newPostPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(newPostPanelLayout.createSequentialGroup()
                    .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(commentLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tagedPeopleLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(newPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(hashTagsLabel)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(newPostPanelLayout.createSequentialGroup()
                    .addComponent(uploadPictureButton)
                    .addGap(18, 18, 18)
                    .addComponent(uploadedPictureLabel)))
            .addGap(18, 18, 18)
            .addComponent(createNewPostButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(newPostOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(77, 77, 77))
    );

    uploadPictureButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    createNewPostButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

    mainWindowLayoutPanel.add(newPostPanel, "card2");

    notificationPanel.setMaximumSize(new java.awt.Dimension(536, 466));
    notificationPanel.setMinimumSize(new java.awt.Dimension(536, 466));

    javax.swing.GroupLayout notificationOutputPanelLayout = new javax.swing.GroupLayout(notificationOutputPanel);
    notificationOutputPanel.setLayout(notificationOutputPanelLayout);
    notificationOutputPanelLayout.setHorizontalGroup(
        notificationOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 534, Short.MAX_VALUE)
    );
    notificationOutputPanelLayout.setVerticalGroup(
        notificationOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 464, Short.MAX_VALUE)
    );

    jScrollPane9.setViewportView(notificationOutputPanel);
    notificationOutputPanel.setLayout(new BoxLayout(notificationOutputPanel, BoxLayout.Y_AXIS));

    javax.swing.GroupLayout notificationPanelLayout = new javax.swing.GroupLayout(notificationPanel);
    notificationPanel.setLayout(notificationPanelLayout);
    notificationPanelLayout.setHorizontalGroup(
        notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane9)
    );
    notificationPanelLayout.setVerticalGroup(
        notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane9)
    );

    mainWindowLayoutPanel.add(notificationPanel, "card4");

    profilePanel.setMaximumSize(new java.awt.Dimension(536, 466));
    profilePanel.setMinimumSize(new java.awt.Dimension(536, 466));

    /*try {
        ImageIcon ii=new ImageIcon(scaleImage(77, 77, ImageIO.read(new File(System.getProperty("user.dir")+"\\ProfilePicture.png"))));
        if(main.getLoggedIn().getProfilePic() != null){
            ii = new ImageIcon(scaleImage(77, 77, ImageIO.read(new File(System.getProperty("user.dir")+ "\\" + main.getLoggedIn().getUsername() + "profilepic.png"))));
            }
            profilePictureLabel.setIcon(ii);
        } catch (Exception ex) {
            ex.printStackTrace();
        }*/

        usernameLabel.setText("Username");

        firstnameLabel.setText("Firstname");

        lastnameLabel.setText("Lastname");

        numberFollowersLabel.setText("# Followers: ");

        numberFollowingLabel.setText("# Following: ");

        followButton.setText("Follow");

        javax.swing.GroupLayout staticProfilePanelLayout = new javax.swing.GroupLayout(staticProfilePanel);
        staticProfilePanel.setLayout(staticProfilePanelLayout);
        staticProfilePanelLayout.setHorizontalGroup(
            staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staticProfilePanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(profilePictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addGroup(staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel)
                    .addGroup(staticProfilePanelLayout.createSequentialGroup()
                        .addGroup(staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(staticProfilePanelLayout.createSequentialGroup()
                                .addComponent(firstnameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastnameLabel))
                            .addGroup(staticProfilePanelLayout.createSequentialGroup()
                                .addComponent(numberFollowersLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numberFollowingLabel)))
                        .addGap(38, 38, 38)
                        .addComponent(followButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        staticProfilePanelLayout.setVerticalGroup(
            staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, staticProfilePanelLayout.createSequentialGroup()
                .addGroup(staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(staticProfilePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberFollowersLabel)
                            .addComponent(numberFollowingLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(staticProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstnameLabel)
                            .addComponent(lastnameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(staticProfilePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(followButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(usernameLabel)
                .addGap(23, 23, 23))
            .addGroup(staticProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profilePictureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        usernameLabel.setText(main.getLoggedIn().getUsername());
        firstnameLabel.setText(main.getLoggedIn().getFirstName());
        lastnameLabel.setText(main.getLoggedIn().getLastName());
        numberFollowersLabel.setText("# Followers: " + main.getLoggedIn().getFollowers().size());
        numberFollowingLabel.setText("# Following: " + main.getLoggedIn().getFollowing().size());
        followButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        javax.swing.GroupLayout userPostPanelLayout = new javax.swing.GroupLayout(userPostPanel);
        userPostPanel.setLayout(userPostPanelLayout);
        userPostPanelLayout.setHorizontalGroup(
            userPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        userPostPanelLayout.setVerticalGroup(
            userPostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        userPostScrollPane.setViewportView(userPostPanel);
        userPostPanel.setLayout(new BoxLayout(userPostPanel, BoxLayout.Y_AXIS));

        javax.swing.GroupLayout profilePanelLayout = new javax.swing.GroupLayout(profilePanel);
        profilePanel.setLayout(profilePanelLayout);
        profilePanelLayout.setHorizontalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(staticProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(userPostScrollPane)
        );
        profilePanelLayout.setVerticalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePanelLayout.createSequentialGroup()
                .addComponent(staticProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userPostScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))
        );

        mainWindowLayoutPanel.add(profilePanel, "card5");

        newMessageButton.setText("New Message");
        newMessageButton.setMaximumSize(new java.awt.Dimension(100, 23));
        newMessageButton.setMinimumSize(new java.awt.Dimension(100, 23));
        newMessageButton.setPreferredSize(new java.awt.Dimension(100, 23));
        newMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMessageButtonActionPerformed(evt);
            }
        });

        inboxButton.setText("Inbox");
        inboxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxButtonActionPerformed(evt);
            }
        });

        sentButton.setText("Sents");
        sentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dmMenuPanelLayout = new javax.swing.GroupLayout(dmMenuPanel);
        dmMenuPanel.setLayout(dmMenuPanelLayout);
        dmMenuPanelLayout.setHorizontalGroup(
            dmMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dmMenuPanelLayout.createSequentialGroup()
                .addComponent(inboxButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(sentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dmMenuPanelLayout.setVerticalGroup(
            dmMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dmMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(newMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(inboxButton)
                .addComponent(sentButton))
        );

        newMessageButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        inboxButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        sentButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        dmLayoutPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout inboxOutputPanelLayout = new javax.swing.GroupLayout(inboxOutputPanel);
        inboxOutputPanel.setLayout(inboxOutputPanelLayout);
        inboxOutputPanelLayout.setHorizontalGroup(
            inboxOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );
        inboxOutputPanelLayout.setVerticalGroup(
            inboxOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jScrollPane10.setViewportView(inboxOutputPanel);
        inboxOutputPanel.setLayout(new BoxLayout(inboxOutputPanel, BoxLayout.Y_AXIS));

        javax.swing.GroupLayout inboxPanelLayout = new javax.swing.GroupLayout(inboxPanel);
        inboxPanel.setLayout(inboxPanelLayout);
        inboxPanelLayout.setHorizontalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10)
        );
        inboxPanelLayout.setVerticalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );

        dmLayoutPanel.add(inboxPanel, "card4");

        javax.swing.GroupLayout sentsPanelLayout = new javax.swing.GroupLayout(sentsPanel);
        sentsPanel.setLayout(sentsPanelLayout);
        sentsPanelLayout.setHorizontalGroup(
            sentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );
        sentsPanelLayout.setVerticalGroup(
            sentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jScrollPane7.setViewportView(sentsPanel);
        sentsPanel.setLayout(new BoxLayout(sentsPanel, BoxLayout.Y_AXIS));

        javax.swing.GroupLayout sentPanelLayout = new javax.swing.GroupLayout(sentPanel);
        sentPanel.setLayout(sentPanelLayout);
        sentPanelLayout.setHorizontalGroup(
            sentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7)
        );
        sentPanelLayout.setVerticalGroup(
            sentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );

        dmLayoutPanel.add(sentPanel, "card2");

        newMessagePanel.setMaximumSize(new java.awt.Dimension(536, 466));
        newMessagePanel.setMinimumSize(new java.awt.Dimension(536, 466));

        contactUsernameLabel.setText("Enter Username of person you want to contact: ");

        messageField.setColumns(20);
        messageField.setRows(5);
        jScrollPane3.setViewportView(messageField);

        messageLabel.setText("Enter Message to be sent: ");

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        dmPhotoButton.setText("Select Photo");
        dmPhotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dmPhotoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newMessagePanelLayout = new javax.swing.GroupLayout(newMessagePanel);
        newMessagePanel.setLayout(newMessagePanelLayout);
        newMessagePanelLayout.setHorizontalGroup(
            newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newMessagePanelLayout.createSequentialGroup()
                .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newMessagePanelLayout.createSequentialGroup()
                        .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newMessagePanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(dmPhotoButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dmPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newMessagePanelLayout.createSequentialGroup()
                                    .addGap(210, 210, 210)
                                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(newMessagePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(newMessagePanelLayout.createSequentialGroup()
                                        .addComponent(contactUsernameLabel)
                                        .addGap(50, 50, 50)
                                        .addComponent(contactUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(newMessagePanelLayout.createSequentialGroup()
                                        .addComponent(messageLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addComponent(messageOutputLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        newMessagePanelLayout.setVerticalGroup(
            newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newMessagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactUsernameLabel)
                    .addComponent(contactUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messageLabel))
                .addGap(30, 30, 30)
                .addGroup(newMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dmPhotoButton)
                    .addComponent(dmPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(sendButton)
                .addGap(18, 18, 18)
                .addComponent(messageOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        sendButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        dmPhotoButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        dmLayoutPanel.add(newMessagePanel, "card3");

        javax.swing.GroupLayout dmPanelLayout = new javax.swing.GroupLayout(dmPanel);
        dmPanel.setLayout(dmPanelLayout);
        dmPanelLayout.setHorizontalGroup(
            dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dmMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(dmLayoutPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dmPanelLayout.setVerticalGroup(
            dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dmPanelLayout.createSequentialGroup()
                .addComponent(dmMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dmLayoutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 437, Short.MAX_VALUE))
        );

        mainWindowLayoutPanel.add(dmPanel, "card7");

        settingsPanel.setMaximumSize(new java.awt.Dimension(536, 466));

        changeFirstnameLabel.setText("Change First Name: ");

        changeFirstnameButton.setText("Commit");
        changeFirstnameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFirstnameButtonActionPerformed(evt);
            }
        });

        changeLastnameLabel.setText("Change Last Name: ");

        changeLastnameButton.setText("Commit");
        changeLastnameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeLastnameButtonActionPerformed(evt);
            }
        });

        changePasswordLabel.setText("Change Password: ");

        currentPasswordLabel.setText("Current Password: ");

        privateAccoutLabel.setText("Private Account: ");

        privateAccountCheckBox.setText("(Only your followers will be able to view your profile)");
        privateAccountCheckBox.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        privateAccountButton.setText("Commit");
        privateAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateAccountButtonActionPerformed(evt);
            }
        });

        newPasswordLabel1.setText("New Password: ");

        newPasswordLabel2.setText("Reenter New Password: ");

        changePasswordButton.setText("Commit");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        signOutButton.setText("Sign Out");
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        privateAccoutOutputLabel.setMaximumSize(new java.awt.Dimension(516, 21));
        privateAccoutOutputLabel.setPreferredSize(new java.awt.Dimension(516, 21));

        changeFirstnameOutputLabel.setMaximumSize(new java.awt.Dimension(516, 21));
        changeFirstnameOutputLabel.setPreferredSize(new java.awt.Dimension(516, 21));

        changeLastnameOutputLabel.setMaximumSize(new java.awt.Dimension(516, 21));
        changeLastnameOutputLabel.setPreferredSize(new java.awt.Dimension(516, 21));

        passwordOutputLabel.setMaximumSize(new java.awt.Dimension(203, 141));
        passwordOutputLabel.setPreferredSize(new java.awt.Dimension(203, 141));

        changeProfilePhotoButton.setText("Change Profile Picture");
        changeProfilePhotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeProfilePhotoButtonActionPerformed(evt);
            }
        });

        commitPhotoChangeButton.setText("Commit");
        commitPhotoChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitPhotoChangeButtonActionPerformed(evt);
            }
        });

        changeProfilePictureOutputLabel.setPreferredSize(new java.awt.Dimension(139, 21));

        clearNotificationsButton.setText("Clear Notifications");
        clearNotificationsButton.setMaximumSize(new java.awt.Dimension(139, 23));
        clearNotificationsButton.setMinimumSize(new java.awt.Dimension(139, 23));
        clearNotificationsButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        clearNotificationsButton.setPreferredSize(new java.awt.Dimension(139, 23));
        clearNotificationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearNotificationsButtonActionPerformed(evt);
            }
        });

        clearInboxButton.setText("Clear Inbox");
        clearInboxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInboxButtonActionPerformed(evt);
            }
        });

        clearSentsButton.setText("Clear Sents");
        clearSentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSentsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(changeLastnameOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(changeFirstnameOutputLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(privateAccoutOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newPasswordLabel2)
                                    .addComponent(newPasswordLabel1)
                                    .addComponent(currentPasswordLabel))
                                .addGap(76, 76, 76))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(changeProfilePhotoButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(changePasswordButton)
                                    .addComponent(changeProfilePictureOutputLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(29, 29, 29)))
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(currentPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(newPasswordField1)
                                    .addComponent(newPasswordField2))
                                .addGap(18, 18, 18)
                                .addComponent(passwordOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(changeProfilePictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(commitPhotoChangeButton)
                                .addGap(20, 20, 20)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(clearInboxButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearSentsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(clearNotificationsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeFirstnameLabel)
                            .addComponent(changeLastnameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(changeFirstnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(changeFirstnameButton))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(changeLastnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(changeLastnameButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(changePasswordLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(privateAccoutLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(privateAccountCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(privateAccountButton)))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(clearInboxButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearSentsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(signOutButton))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(changeFirstnameLabel)
                            .addComponent(changeFirstnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeFirstnameButton))
                        .addGap(1, 1, 1)
                        .addComponent(changeFirstnameOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(changeLastnameLabel)
                            .addComponent(changeLastnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeLastnameButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeLastnameOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(privateAccoutLabel)
                            .addComponent(privateAccountCheckBox)
                            .addComponent(privateAccountButton))
                        .addGap(1, 1, 1)
                        .addComponent(privateAccoutOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changePasswordLabel)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(passwordOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(currentPasswordLabel)
                                            .addComponent(currentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(newPasswordLabel1)
                                            .addComponent(newPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(9, 9, 9)
                                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(newPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(newPasswordLabel2))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(changePasswordButton)
                                    .addComponent(clearNotificationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(22, 22, 22)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commitPhotoChangeButton)
                            .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                                    .addComponent(changeProfilePhotoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(changeProfilePictureOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(29, 29, 29))
                                .addComponent(changeProfilePictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );

        changeFirstnameButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        changeLastnameButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        privateAccountButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        changePasswordButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        signOutButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        changeProfilePhotoButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        commitPhotoChangeButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        mainWindowLayoutPanel.add(settingsPanel, "card8");

        mainWindowScrollPane.setViewportView(mainWindowLayoutPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bottomMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainWindowScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainWindowScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Takes the user to their home page, and loads their feed if the have any
     * posts to load
     *
     * @param evt when the user clicks the home button
     */
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(homePanel);
        feedPanel.removeAll();

        main.clearFeed();
        ArrayList<Post> feed = main.updateFeed();
        for (int i = 0; i < feed.size(); i++) {
            RealProfile lookingAt = null;
            for (int x = 0; x < main.getLoggedIn().getFollowing().size(); x++) {
                for (int j = 0; j
                        < main.getLoggedIn().getFollowing().get(x).getPosts()
                                .size(); j++) {
                    if (main.getLoggedIn().getFollowing().get(x).getPosts()
                            .get(j).getCaption()
                            .equals(feed.get(i).getCaption())) {
                        lookingAt = main.getLoggedIn().getFollowing().get(x);
                        break;
                    }
                }
            }
            feedPanel.add(new UserPanel(feed.get(i).getImage(),
                    feed.get(i).getCaption(), feed.get(i).getDate(),
                    feed.get(i).getLikes(), i, lookingAt));
            feedPanel.revalidate();
            feedPanel.repaint();
        }

        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_homeButtonActionPerformed

    /**
     * Takes the user to the search page
     *
     * @param evt when the user clicks the search button
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(searchPanel);
        userInput.setText("");
        searchOutputPanel.removeAll();
        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Takes the user to the new Post page where they can Post a new Post
     *
     * @param evt when the user clicks the new Post button
     */
    private void newPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPostButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(newPostPanel);

        try {
            ImageIcon emptyPicture = new ImageIcon(scaleImage(
                    120, 120, ImageIO.read(new File(imagesDir
                            + "Empty Image.jpg"))));
            icon = emptyPicture;
            uploadedPictureLabel.setIcon(emptyPicture);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        captionField.setText("");
        tagedPeopleField.setText("");
        hashTagsField.setText("");
        newPostOutputLabel.setText("");

        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_newPostButtonActionPerformed

    /**
     * Takes the user to their notification page and loads their notification if
     * they have any
     *
     * @param evt when the user clicks the notification button
     */
    private void notificationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notificationsButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(notificationPanel);
        notificationOutputPanel.removeAll();

        RealProfile user = main.getLoggedIn();

        for (int i = 0; i < user.getNotifications().size(); i++) {
            ImageIcon ii = (ImageIcon) user.getProfilePic();

            if (user.getNotifications().get(i).getPost()
                    != null) {
                ii = (ImageIcon) user.getNotifications().get(i).getPost().getImage();
            }
            notificationOutputPanel.add(new NotificationPanel(
                    user.getNotifications().get(i).getActor(),
                    user.getNotifications().get(i).getReceiver(),
                    user.getNotifications().get(i).getNotification(),
                    user.getNotifications().get(i).getDate(),
                    ii, user.getNotifications().get(i).getMethod(),
                    user.getNotifications().get(i).getPost()));
        }

        notificationOutputPanel.repaint();
        notificationOutputPanel.revalidate();
        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_notificationsButtonActionPerformed

    /**
     * Takes the user to their profile page and loads their posts if they have
     * any
     *
     * @param evt when the user clicks the profile button
     */
    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        userPostPanel.removeAll();
        mainWindowLayoutPanel.add(profilePanel);

        profilePictureLabel.setIcon(main.getLoggedIn().getProfilePic());
        numberFollowersLabel.setText(Integer.toString(
                main.getLoggedIn().getFollowers().size()) + " Followers");
        numberFollowingLabel.setText(Integer.toString(
                main.getLoggedIn().getFollowing().size()) + " Following");
        firstnameLabel.setText(main.getLoggedIn().getFirstName());
        lastnameLabel.setText(main.getLoggedIn().getLastName());
        usernameLabel.setText(main.getLoggedIn().getUsername());
        followButton.setEnabled(false);

        for (int i = 0; i < main.getLoggedIn().getPosts().size(); i++) {
            userPostPanel.add(new UserPanel(
                    main.getLoggedIn().getPosts().get(i).getImage(),
                    main.getLoggedIn().getPosts().get(i).getCaption(),
                    main.getLoggedIn().getPosts().get(i).getDate(),
                    main.getLoggedIn().getPosts().get(i).getLikes(), i,
                    main.getLoggedIn()));
            userPostPanel.revalidate();
            userPostPanel.repaint();
        }

        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_profileButtonActionPerformed

    /**
     * Takes the user to the settings page
     *
     * @param evt when the user clicks the settings button
     */
    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(settingsPanel);
        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
        passwordOutputLabel.setText("");
        changeFirstnameOutputLabel.setText("");
        changeLastnameOutputLabel.setText("");
        try {
            ImageIcon emptyPicture = new ImageIcon(scaleImage(
                    77, 77, ImageIO.read(new File(imagesDir
                            + "ProfilePicture.png"))));
            changeProfilePictureLabel.setIcon(emptyPicture);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        changeProfilePictureOutputLabel.setText("");
        privateAccoutOutputLabel.setText("");

        //change to user state
        boolean checked = main.getLoggedIn().getPrivacy();
        privateAccountCheckBox.setSelected(checked);
    }//GEN-LAST:event_settingsButtonActionPerformed

    /**
     * Takes the user to their DMs page and loads their inbox
     *
     * @param evt when the user clicks the dm button
     */
    private void dmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dmButtonActionPerformed
        mainWindowLayoutPanel.removeAll();
        mainWindowLayoutPanel.add(dmPanel);
        inboxOutputPanel.removeAll();

        for (int i = 0; i < main.getLoggedIn().getInbox().size(); i++) {
            inboxOutputPanel.add(new DmPanel(i,
                    "inbox"));
        }

        inboxOutputPanel.repaint();
        inboxOutputPanel.revalidate();
        mainWindowLayoutPanel.repaint();
        mainWindowLayoutPanel.revalidate();
    }//GEN-LAST:event_dmButtonActionPerformed

    /**
     * Sign this user out take them back to the log in frame
     *
     * @param evt when the user clicks the sign out button located in the
     * settings page
     */
    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        main.close();
        Login x = new Login();
        x.setVisible(true);
        super.dispose();
    }//GEN-LAST:event_signOutButtonActionPerformed

    /**
     * Changes this users password
     *
     * @param evt when the user clicks the change password button
     */
    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        currentPassword = currentPasswordField.getText();
        newPassword1 = newPasswordField1.getText();
        newPassword2 = newPasswordField2.getText();
        currentPasswordField.setText("");
        newPasswordField1.setText("");
        newPasswordField2.setText("");
        if (!currentPassword.equals(main.getLoggedIn().getPassword())) {
            passwordOutputLabel.setText("ERROR: Password incorrect.");
        } else if (currentPassword.equals("") || newPassword1.equals("")) {
            passwordOutputLabel.setText("ERROR: Field not complete.");
        } else if (newPassword1.equalsIgnoreCase(main.getLoggedIn()
                .getUsername())) {
            passwordOutputLabel.setText("<HTML>ERROR: Password cannot "
                    + "<br>match username.<HTML>");
        } else {
            if (newPassword1.equals(newPassword2)) {
                main.getLoggedIn().setPassword(newPassword1);
                main.output();
                passwordOutputLabel.setText("Password has been changed.");
            } else {
                passwordOutputLabel.setText("<HTML>ERROR: New Passwords "
                        + "<br>do not match.<HTML>");
            }
        }
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    /**
     * Changes the state of this user's privacy
     *
     * @param evt when the user clicks the private account button
     */
    private void privateAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateAccountButtonActionPerformed
        privateAccount = privateAccountCheckBox.isSelected();
        main.getLoggedIn().changePrivacy(privateAccount);
        main.output();
        privateAccoutOutputLabel.setText("Changed account privacy");
    }//GEN-LAST:event_privateAccountButtonActionPerformed

    /**
     * Changes the last name of this user
     *
     * @param evt when the user clicks the change last name button
     */
    private void changeLastnameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeLastnameButtonActionPerformed
        newLastname = changeLastnameField.getText();
        changeLastnameField.setText("");
        if (newLastname.equals("")) {
            changeLastnameOutputLabel.setText("Field not Complete");
        } else {
            main.getLoggedIn().setLastName(newLastname);
            lastnameLabel.setText(main.getLoggedIn().getLastName());
            main.output();
            changeLastnameOutputLabel.setText("Changing Last name to: "
                    + newLastname);
        }
    }//GEN-LAST:event_changeLastnameButtonActionPerformed

    /**
     * Changes the first name of the user
     *
     * @param evt when the user clicks the change first name button
     */
    private void changeFirstnameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFirstnameButtonActionPerformed
        newFirstname = changeFirstnameField.getText();
        changeFirstnameField.setText("");
        if (newFirstname.equals("")) {
            changeFirstnameOutputLabel.setText("Field not Complete");
        } else {
            main.getLoggedIn().setFirstName(newFirstname);
            firstnameLabel.setText(main.getLoggedIn().getFirstName());
            main.output();
            changeFirstnameOutputLabel.setText("Changing First name to: "
                    + newFirstname);
        }
    }//GEN-LAST:event_changeFirstnameButtonActionPerformed

    /**
     * Preforms a search depending of what the user is looking for
     *
     * @param evt when the user clicks the search button located in the search
     * page
     */
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchOutputPanel.removeAll();
        searchOutputPanel.repaint();
        searchInput = userInput.getText();
        parameter = searchParameter.getSelectedItem().toString();

        RealProfile user = null;
        int postIndex = 0;

        if (parameter.equalsIgnoreCase("Username")) {
            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                if (main.getAllProfiles().get(i).getUsername().toLowerCase().contains(searchInput.toLowerCase())) {
                    user = main.getAllProfiles().get(i);
                    if (!user.getUsername().equalsIgnoreCase("guest")) {
                        postIndex = i;
                        searchOutputPanel.add(new SearchOutputPanel(parameter,
                                searchInput, user, postIndex));
                    }
                }
            }
        } else if (parameter.equalsIgnoreCase("hash tags")) {
            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                for (int j = 0; j
                        < main.getAllProfiles().get(i).getPosts().size(); j++) {
                    for (int x = 0; x < main.getAllProfiles().get(i)
                            .getPosts().get(j).getHashtags().size(); x++) {
                        if (main.getAllProfiles().get(i)
                                .getPosts().get(j).getHashtags().get(x)
                                .equalsIgnoreCase(searchInput)) {
                            user = main.getAllProfiles().get(i);
                            postIndex = j;
                            searchOutputPanel.add(new SearchOutputPanel(parameter,
                                    searchInput, user, postIndex));
                        }
                    }
                }
            }
        } else if (parameter.equalsIgnoreCase("people tagged")) {
            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                for (int j = 0; j
                        < main.getAllProfiles().get(i).getPosts().size(); j++) {
                    for (int x = 0; x < main.getAllProfiles().get(i)
                            .getPosts().get(j).getTagged().size(); x++) {
                        if (main.getAllProfiles().get(i)
                                .getPosts().get(j).getTagged().get(x)
                                .equalsIgnoreCase(searchInput)) {
                            user = main.getAllProfiles().get(i);
                            postIndex = j;
                            searchOutputPanel.add(new SearchOutputPanel(parameter,
                                    searchInput, user, postIndex));
                        }
                    }
                }
            }
        } else {
            searchOutputPanel.add(new SearchOutputPanel(parameter, searchInput,
                    null, 0));
        }
        searchOutputPanel.revalidate();
        searchOutputPanel.repaint();

    }//GEN-LAST:event_searchButton1ActionPerformed

    /**
     * Takes the user to their inbox page and loads their inbox
     *
     * @param evt when the user clicks the inbox button
     */
    private void inboxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxButtonActionPerformed
        dmLayoutPanel.removeAll();
        dmLayoutPanel.add(inboxPanel);
        inboxOutputPanel.removeAll();

        for (int i = 0; i < main.getLoggedIn().getInbox().size(); i++) {
            inboxOutputPanel.add(new DmPanel(i,
                    "inbox"));
        }

        inboxOutputPanel.repaint();
        inboxOutputPanel.revalidate();
        dmLayoutPanel.repaint();
        dmLayoutPanel.revalidate();
    }//GEN-LAST:event_inboxButtonActionPerformed

    /**
     * Takes the user to their sents page and loads their sent messages
     *
     * @param evt when the user clicks the sents button
     */
    private void sentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sentButtonActionPerformed
        dmLayoutPanel.removeAll();
        dmLayoutPanel.add(sentPanel);
        sentsPanel.removeAll();

        for (int i = 0; i < main.getLoggedIn().getSents().size(); i++) {
            sentsPanel.add(new DmPanel(i,
                    "sents"));
        }

        sentsPanel.repaint();
        sentsPanel.revalidate();
        dmLayoutPanel.repaint();
        dmLayoutPanel.revalidate();
    }//GEN-LAST:event_sentButtonActionPerformed

    /**
     * Takes the user to the new message page
     *
     * @param evt when the user clicks the new message button
     */
    private void newMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMessageButtonActionPerformed
        dmLayoutPanel.removeAll();
        dmLayoutPanel.add(newMessagePanel);

        contactUsernameField.setText("");
        messageField.setText("");
        try {
            ImageIcon emptyPicture = new ImageIcon(scaleImage(
                    120, 120, ImageIO.read(new File(imagesDir
                            + "Empty Image.jpg"))));
            dmPhotoLabel.setIcon(emptyPicture);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        messageOutputLabel.setText("");

        dmLayoutPanel.repaint();
        dmLayoutPanel.revalidate();
    }//GEN-LAST:event_newMessageButtonActionPerformed

    /**
     * Uploads a picture to be added to a Post
     *
     * @param evt when the user clicks the upload picture button
     */
    private void uploadPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPictureButtonActionPerformed
        String ImagePath = UploadPhoto(uploadedPictureLabel, 120, 120);
        if (ImagePath != null) {
        } else {
            newPostOutputLabel.setText("Picture was not found");
        }
    }//GEN-LAST:event_uploadPictureButtonActionPerformed

    /**
     * Uploads a picture to be sent as a DM
     *
     * @param evt when the user clicks the dm photo button
     */
    private void dmPhotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dmPhotoButtonActionPerformed
        // TODO add your handling code here:
        String ImagePath = UploadPhoto(dmPhotoLabel, 120, 120);
        if (ImagePath != null) {
        } else {
            messageOutputLabel.setText("Picture was not found");
        }
    }//GEN-LAST:event_dmPhotoButtonActionPerformed

    /**
     * Uploads a new profile picture but does not change the profile picture
     *
     * @param evt when the user clicks the change profile photo button
     */
    private void changeProfilePhotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeProfilePhotoButtonActionPerformed
        // TODO add your handling code here:
        String ImagePath = UploadPhoto(changeProfilePictureLabel, 77, 77);
    }//GEN-LAST:event_changeProfilePhotoButtonActionPerformed

    /**
     * Changes the profile picture of this user
     *
     * @param evt when the user clicks commit phot change button
     */
    private void commitPhotoChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitPhotoChangeButtonActionPerformed
        // TODO add your handling code here:
        if (changeProfilePictureLabel.getIcon() != null) {
            try {
                profilePictureLabel.setIcon(changeProfilePictureLabel.getIcon());
                ImageIcon img = (ImageIcon) changeProfilePictureLabel.getIcon();

                main.getLoggedIn().setProfilePic(img);
                changeProfilePictureOutputLabel.setText(
                        "Profile picture changed.");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            changeProfilePictureOutputLabel.setText("Select a picture.");
        }

    }//GEN-LAST:event_commitPhotoChangeButtonActionPerformed

    /**
     * Creates a new Post to be posted
     *
     * @param evt when the user clicks the create new Post button
     */
    private void createNewPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewPostButtonActionPerformed
        String caption = captionField.getText();

        ArrayList<String> peopleTaged = new ArrayList<String>();
        String gross1 = tagedPeopleField.getText();
        int i = 0;
        while (gross1.length() != 0) {
            if (gross1.charAt(i) == ' ' || i == gross1.length() - 1) {
                if (i == gross1.length() - 1) {
                    peopleTaged.add(gross1.substring(0, i + 1));

                } else {
                    peopleTaged.add(gross1.substring(0, i));
                }

                if (i + 1 > 0) {
                    gross1 = gross1.substring(i + 1, gross1.length());
                } else {
                    gross1 = "";
                }
                i = 0;
            }
            i++;
        }

        ArrayList<String> hashTages = new ArrayList<String>();
        String gross2 = hashTagsField.getText();
        i = 0;
        int original2 = gross2.length();
        while (gross2.length() != 0) {
            if (gross2.charAt(i) == ' ' || i == gross2.length() - 1) {
                if (i == gross2.length() - 1) {
                    hashTages.add(gross2.substring(0, i + 1));

                } else {
                    hashTages.add(gross2.substring(0, i));
                }

                if (i + 1 > 0) {
                    gross2 = gross2.substring(i + 1, gross2.length());
                } else {
                    gross2 = "";
                }
                i = 0;
            }
            i++;
        }

        Date date = new Date();
        SimpleDateFormat format = new SimpleDateFormat("MM-dd HH:mm");
        String time = format.format(date);
        int likes = 0;
        ImageIcon picture = null;
        try {
            picture = new ImageIcon(scaleImage(
                    120, 120, ImageIO.read(new File(imagesDir
                            + "Empty Image.jpg"))));
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        if (!caption.equals("")) {
            if (!uploadedPictureLabel.getIcon().equals(icon)) {
                main.getLoggedIn().addPost(caption,
                        uploadedPictureLabel.getIcon(),
                        new ArrayList(), hashTages, peopleTaged);
                userPostPanel.add(new UserPanel(uploadedPictureLabel.getIcon(),
                        caption, time, likes,
                        main.getLoggedIn().getPosts().size() - 1,
                        main.getLoggedIn()));

                main.output();
                newPostOutputLabel.setText("New post created.");
                uploadedPictureLabel.setIcon(picture);
                hashTagsField.setText("");
                tagedPeopleField.setText("");
                captionField.setText("");
            } else {
                newPostOutputLabel.setText("ERROR: Please select a picture.");
            }

        } else {
            newPostOutputLabel.setText("ERROR: Please add a caption.");
        }

        userPostPanel.revalidate();
        userPostPanel.repaint();
    }//GEN-LAST:event_createNewPostButtonActionPerformed

    /**
     * Create and sends a new Direct Message
     *
     * @param evt when the user clicks the send button
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String username = contactUsernameField.getText();
        String message = messageField.getText();
        Date date = new Date();
        SimpleDateFormat format = new SimpleDateFormat("MM-dd HH:mm");
        String time = format.format(date);
        Boolean realUser = false;
        RealProfile user = null;
        for (int i = 0; i < main.getAllProfiles().size(); i++) {
            if (main.getAllProfiles().get(i).getUsername().equals(username)) {
                if (!main.getAllProfiles().get(i).getUsername()
                        .equalsIgnoreCase("guest")) {
                    realUser = true;
                    user = main.getAllProfiles().get(i);
                    break;
                }
            }
        }

        if (!username.equalsIgnoreCase("")) {
            if (!message.equalsIgnoreCase("")) {
                if (dmPhotoLabel.getIcon() != null) {
                    if (realUser) {
                        main.getLoggedIn().addSents(new DirectMessage(message,
                                time, dmPhotoLabel.getIcon(),
                                main.getLoggedIn(), user));

                        user.addInbox(new DirectMessage(message,
                                time, dmPhotoLabel.getIcon(),
                                main.getLoggedIn(), user));

                        user.addNotification(main.getLoggedIn(), user, time,
                                "sent you a \nmessage", null, "follow");

                        messageOutputLabel.setText("Message Sent");
                        main.output();
                        contactUsernameField.setText("");
                        messageField.setText("");
                        ImageIcon picture = null;
                        try {
                            picture = new ImageIcon(scaleImage(
                                    120, 120, ImageIO.read(new File(imagesDir
                                            + "Empty Image.jpg"))));
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                        dmPhotoLabel.setIcon(picture);

                    } else {
                        messageOutputLabel.setText("ERROR: User does not exist.");
                    }
                } else {
                    messageOutputLabel.setText("ERROR: Enter a photo.");
                }

            } else {
                messageOutputLabel.setText("ERROR: Enter a message.");
            }

        } else {
            messageOutputLabel.setText("ERROR: Enter a username.");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * Clears this user's notifications
     *
     * @param evt when the user clicks the clear notifications button
     */
    private void clearNotificationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearNotificationsButtonActionPerformed
        main.getLoggedIn().clearNotifications();
    }//GEN-LAST:event_clearNotificationsButtonActionPerformed

    /**
     * Clears this user's inbox
     *
     * @param evt when the user clicks the clear inbox button
     */
    private void clearInboxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInboxButtonActionPerformed
        main.getLoggedIn().clearInbox();
    }//GEN-LAST:event_clearInboxButtonActionPerformed

    /**
     * Clears the user's sents
     *
     * @param evt when the user clicks the clear sents button
     */
    private void clearSentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSentsButtonActionPerformed
        main.getLoggedIn().clearSents();
    }//GEN-LAST:event_clearSentsButtonActionPerformed

    /**
     * Scales size of image to correct size
     *
     * @param w width of size needed
     * @param h height of size needed
     * @param img Image being used to resize
     * @return returns resized image
     * @throws Exception
     */
    public static BufferedImage scaleImage(int w, int h, BufferedImage img) throws Exception {
        BufferedImage bi;
        bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(img, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }

    /**
     * Pops up a interface where the user can pick out a photo
     *
     * @param x where the picture will be uploaded to
     * @param w width of the picture
     * @param h height of the picture
     * @return the uploaded picture
     */
    public static String UploadPhoto(JLabel x, int w, int h) {
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        final File f = chooser.getSelectedFile();
        String path = f.getAbsolutePath();
        try {
            ImageIcon ii = new ImageIcon(scaleImage(w, h, ImageIO.read(
                    new File(path))));
            x.setIcon(ii);
            return path;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EagleGram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EagleGram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EagleGram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EagleGram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RealProfile test = new RealProfile("test", "test", "test",
                        "test");
                new EagleGram(test).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomMenu;
    private javax.swing.JTextArea captionField;
    private javax.swing.JButton changeFirstnameButton;
    private javax.swing.JTextField changeFirstnameField;
    private javax.swing.JLabel changeFirstnameLabel;
    private javax.swing.JLabel changeFirstnameOutputLabel;
    private javax.swing.JButton changeLastnameButton;
    private javax.swing.JTextField changeLastnameField;
    private javax.swing.JLabel changeLastnameLabel;
    private javax.swing.JLabel changeLastnameOutputLabel;
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JButton changeProfilePhotoButton;
    private javax.swing.JLabel changeProfilePictureLabel;
    private javax.swing.JLabel changeProfilePictureOutputLabel;
    private javax.swing.JButton clearInboxButton;
    private javax.swing.JButton clearNotificationsButton;
    private javax.swing.JButton clearSentsButton;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JButton commitPhotoChangeButton;
    private javax.swing.JTextField contactUsernameField;
    private javax.swing.JLabel contactUsernameLabel;
    private javax.swing.JButton createNewPostButton;
    private javax.swing.JPasswordField currentPasswordField;
    private javax.swing.JLabel currentPasswordLabel;
    private javax.swing.JButton dmButton;
    private javax.swing.JPanel dmLayoutPanel;
    private javax.swing.JPanel dmMenuPanel;
    private javax.swing.JPanel dmPanel;
    private javax.swing.JButton dmPhotoButton;
    private javax.swing.JLabel dmPhotoLabel;
    private javax.swing.JLabel eagleGramLabel;
    private javax.swing.JPanel feedPanel;
    private javax.swing.JLabel firstnameLabel;
    private javax.swing.JButton followButton;
    private javax.swing.JTextArea hashTagsField;
    private javax.swing.JLabel hashTagsLabel;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton inboxButton;
    private javax.swing.JPanel inboxOutputPanel;
    private javax.swing.JPanel inboxPanel;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lastnameLabel;
    private javax.swing.JPanel mainWindowLayoutPanel;
    private javax.swing.JScrollPane mainWindowScrollPane;
    private javax.swing.JTextArea messageField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel messageOutputLabel;
    private javax.swing.JButton newMessageButton;
    private javax.swing.JPanel newMessagePanel;
    private javax.swing.JPasswordField newPasswordField1;
    private javax.swing.JPasswordField newPasswordField2;
    private javax.swing.JLabel newPasswordLabel1;
    private javax.swing.JLabel newPasswordLabel2;
    private javax.swing.JButton newPostButton;
    private javax.swing.JLabel newPostOutputLabel;
    private javax.swing.JPanel newPostPanel;
    private javax.swing.JPanel notificationOutputPanel;
    private javax.swing.JPanel notificationPanel;
    private javax.swing.JButton notificationsButton;
    private javax.swing.JLabel numberFollowersLabel;
    private javax.swing.JLabel numberFollowingLabel;
    private javax.swing.JLabel passwordOutputLabel;
    private javax.swing.JButton privateAccountButton;
    private javax.swing.JCheckBox privateAccountCheckBox;
    private javax.swing.JLabel privateAccoutLabel;
    private javax.swing.JLabel privateAccoutOutputLabel;
    private javax.swing.JButton profileButton;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel profilePictureLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JPanel searchOutputPanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox searchParameter;
    private javax.swing.JPanel searchParameterPanel;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sentButton;
    private javax.swing.JPanel sentPanel;
    private javax.swing.JPanel sentsPanel;
    private javax.swing.JButton settingsButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton signOutButton;
    private javax.swing.JPanel staticProfilePanel;
    private javax.swing.JTextArea tagedPeopleField;
    private javax.swing.JLabel tagedPeopleLabel;
    private javax.swing.JPanel topMenu;
    private javax.swing.JButton uploadPictureButton;
    private javax.swing.JLabel uploadedPictureLabel;
    private javax.swing.JTextField userInput;
    private javax.swing.JPanel userPostPanel;
    private javax.swing.JScrollPane userPostScrollPane;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
    private String newFirstname;
    private String newLastname;
    private String newPassword1;
    private String newPassword2;
    private boolean privateAccount;
    private String currentPassword;
    private String searchInput;
    private String parameter;
    private Icon icon;
    private CurrentProfile main = new CurrentProfile();
    private JFrame mainWindow;
    private String fileSeparator = System.getProperty("file.separator");
    private String workingDir = System.getProperty("user.dir");
    private String imagesDir = workingDir + fileSeparator + "src"
            + fileSeparator + "Images" + fileSeparator;
    private int width
            = (Toolkit.getDefaultToolkit().getScreenSize().width / 2) - 269;
    private int height
            = (Toolkit.getDefaultToolkit().getScreenSize().height / 2) - 263;

    /**
     * Creates a new panel for the user's notifications
     */
    private class NotificationPanel extends JPanel {

        /**
         * Constructor of the NotificationPanel
         *
         * @param actor user that performed the action
         * @param receiver user that received the action
         * @param notification the action
         * @param date the date that the action happened
         * @param ii the icon of the Post if this is Post related
         * @param method whether this is Post related or not
         * @param post the Post if this is a Post related notification
         */
        public NotificationPanel(RealProfile actor, RealProfile receiver,
                String notification, String date, ImageIcon ii, String method,
                Post post) {
            setLayout(new GridBagLayout());
            Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);
            Border lineBorder = BorderFactory.createLineBorder(Color.black);
            setBorder(BorderFactory.createCompoundBorder(lineBorder,
                    emptyBorder));

            if (method.equalsIgnoreCase("follow")) {
                JTextArea notificationLabel = new JTextArea();
                notificationLabel.setText(notification);
                notificationLabel.setLineWrap(true);
                notificationLabel.setEditable(false);
                notificationLabel.setSize(120, 120);
                JScrollPane captionScroll = new JScrollPane(notificationLabel,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                captionScroll.setSize(120, 120);
                add(notificationLabel, createGbc(1, 0));

                JLabel usernameLabel = new JLabel();
                usernameLabel.setText(actor.getUsername());
                usernameLabel.setSize(100, 21);
                usernameLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                usernameLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        boolean follows = false;
                        for (int i = 0; i < main.getLoggedIn().getFollowing()
                                .size(); i++) {
                            if (receiver.getFollowing().get(i)
                                    .getUsername().equals(actor.getUsername())) {
                                follows = true;
                                break;
                            }
                        }
                        ProfilePopUp frame = new ProfilePopUp(actor, receiver,
                                mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(usernameLabel, createGbc(0, 0));

                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(date);
                add(timeLabel, createGbc(2, 0));

            } else if (method.equalsIgnoreCase("post")) {
                JTextArea notificationLabel = new JTextArea();
                notificationLabel.setText(notification);
                notificationLabel.setLineWrap(true);
                notificationLabel.setEditable(false);
                notificationLabel.setSize(120, 120);
                JScrollPane captionScroll = new JScrollPane(notificationLabel,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                captionScroll.setSize(120, 120);
                add(notificationLabel, createGbc(1, 0));

                JLabel usernameLabel = new JLabel();
                usernameLabel.setText(receiver.getUsername());
                usernameLabel.setSize(100, 21);
                usernameLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                usernameLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        boolean follows = false;
                        for (int i = 0; i < main.getLoggedIn().getFollowing()
                                .size(); i++) {
                            if (actor.getFollowing().get(i)
                                    .getUsername().equals(receiver.getUsername())) {
                                follows = true;
                                break;
                            }
                        }
                        ProfilePopUp frame = new ProfilePopUp(receiver, actor,
                                mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(usernameLabel, createGbc(0, 0));

                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(120, 120);
                try {
                    pictureLabel.setIcon(ii);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                pictureLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                pictureLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        int postIndex = -1;
                        postIndex = actor.getPosts().indexOf(post);

                        if (postIndex != -1) {
                            PostPopUp frame = new PostPopUp(actor,
                                    main.getLoggedIn(), postIndex, mainWindow);
                            frame.setVisible(true);
                            mainWindow.setVisible(false);
                        }
                    }
                });
                add(pictureLabel, createGbc(0, 2));

                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(date);
                add(timeLabel, createGbc(3, 0));
            }
        }

        /**
         * Positions the different components
         *
         * @param x x coordinate
         * @param y y coordinate
         * @return returns all of the positioned component
         */
        private GridBagConstraints createGbc(int x, int y) {
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = x;
            gbc.gridy = y;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 1.0;
            gbc.anchor = GridBagConstraints.WEST;

            return gbc;
        }
    }

    /**
     * Creates a new panel for the user's DirectMessages
     */
    private class DmPanel extends JPanel {

        /**
         * Constructor for the DmPanel
         *
         * @param dmIndex location of the Direct Message
         * @param method whether this is an inbox or sents message
         */
        public DmPanel(int dmIndex, String method) {
            RealProfile current = main.getLoggedIn();
            setLayout(new GridBagLayout());
            Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);
            Border lineBorder = BorderFactory.createLineBorder(Color.black);
            setBorder(BorderFactory.createCompoundBorder(lineBorder,
                    emptyBorder));
            if (method.equalsIgnoreCase("inbox")) {
                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(120, 120);
                try {
                    pictureLabel.setIcon(current.getInbox().get(dmIndex)
                            .getImageLink());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                add(pictureLabel, createGbc(3, 0));

                JTextArea messageLabel = new JTextArea();
                messageLabel.setText(current.getInbox().get(dmIndex).getMessage());
                messageLabel.setLineWrap(true);
                messageLabel.setEditable(false);
                messageLabel.setSize(120, 120);
                JScrollPane captionScroll = new JScrollPane(messageLabel,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                captionScroll.setSize(120, 120);
                add(messageLabel, createGbc(1, 0));

                JLabel usernameLabel = new JLabel();
                usernameLabel.setText(current.getInbox().get(dmIndex)
                        .getSender().getUsername());
                usernameLabel.setSize(100, 21);
                usernameLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                usernameLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        RealProfile sender = current.getInbox().get(dmIndex)
                                .getSender();
                        ProfilePopUp frame = new ProfilePopUp(sender, current,
                                mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(usernameLabel, createGbc(0, 0));

                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(current.getInbox().get(dmIndex).getDate());
                add(timeLabel, createGbc(4, 0));
            } else if (method.equalsIgnoreCase("sents")) {
                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(120, 120);
                try {
                    pictureLabel.setIcon(current.getSents().get(dmIndex)
                            .getImageLink());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                add(pictureLabel, createGbc(3, 0));

                JTextArea messageLabel = new JTextArea();
                messageLabel.setText(current.getSents().get(dmIndex).getMessage());
                messageLabel.setLineWrap(true);
                messageLabel.setEditable(false);
                messageLabel.setSize(120, 120);
                JScrollPane captionScroll = new JScrollPane(messageLabel,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                captionScroll.setSize(120, 120);
                add(messageLabel, createGbc(1, 0));

                JLabel usernameLabel = new JLabel();
                usernameLabel.setText(current.getSents().get(dmIndex)
                        .getReceiver().getUsername());
                usernameLabel.setSize(100, 21);
                usernameLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                usernameLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        RealProfile reciever = current.getSents().get(dmIndex)
                                .getReceiver();
                        ProfilePopUp frame = new ProfilePopUp(reciever, current,
                                mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(usernameLabel, createGbc(0, 0));

                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(current.getSents().get(dmIndex).getDate());
                add(timeLabel, createGbc(4, 0));
            }
        }

        /**
         * Positions the different components
         *
         * @param x x coordinate
         * @param y y coordinate
         * @return returns all of the positioned component
         */
        private GridBagConstraints createGbc(int x, int y) {
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = x;
            gbc.gridy = y;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 1.0;
            gbc.anchor = GridBagConstraints.WEST;

            return gbc;
        }
    }

    /**
     * Creates a new panel for the user's Post
     */
    private class UserPanel extends JPanel {

        /**
         * Constructor for the UserPanel
         *
         * @param ii Post icon
         * @param caption cation of the Post
         * @param date date that the Post was posted
         * @param likes number of likes that this Post has
         * @param postIndex the location of this Post
         * @param lookingAt the user that is being looked at
         */
        public UserPanel(Icon ii, String caption, String date, int likes,
                int postIndex, RealProfile lookingAt) {
            setLayout(new GridBagLayout());
            Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);
            Border lineBorder = BorderFactory.createLineBorder(Color.black);
            setBorder(BorderFactory.createCompoundBorder(lineBorder,
                    emptyBorder));

            JLabel timeLabel = new JLabel();
            timeLabel.setSize(100, 21);
            timeLabel.setText(date);
            add(timeLabel, createGbc(3, 0));

            JTextArea captionText = new JTextArea();
            captionText.setText(caption);
            captionText.setLineWrap(true);
            captionText.setEditable(false);
            captionText.setSize(120, 120);
            JScrollPane CaptionScroll = new JScrollPane(captionText,
                    JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            CaptionScroll.setSize(120, 120);
            add(captionText, createGbc(1, 0));

            final JLabel likeLabel = new JLabel();
            likeLabel.setText("LIKES: " + Integer.toString(likes));
            likeLabel.setSize(100, 21);
            add(likeLabel, createGbc(2, 0));

            JLabel pictureLabel = new JLabel();
            pictureLabel.setSize(120, 120);
            try {
                pictureLabel.setIcon(ii);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            pictureLabel.setCursor(Cursor.getPredefinedCursor(
                    Cursor.HAND_CURSOR));
            pictureLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    PostPopUp frame = new PostPopUp(lookingAt,
                            main.getLoggedIn(), postIndex, mainWindow);
                    frame.setVisible(true);
                    mainWindow.setVisible(false);
                }
            });
            add(pictureLabel, createGbc(0, 0));
        }

        /**
         * Positions the different components
         *
         * @param x x coordinate
         * @param y y coordinate
         * @return returns all of the positioned component
         */
        private GridBagConstraints createGbc(int x, int y) {
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = x;
            gbc.gridy = y;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 1.0;
            gbc.anchor = GridBagConstraints.WEST;

            return gbc;
        }
    }

    /**
     * Creates a new panel for this user's searches
     */
    private class SearchOutputPanel extends JPanel {

        /**
         * Constructor of the SearchOutputPanel
         *
         * @param method what type of search this is
         * @param searchInput what are they searching
         * @param user the user that is searching
         * @param postIndex the location of the Post if Post related
         */
        public SearchOutputPanel(String method,
                String searchInput, RealProfile lookingAt, int postIndex) {
            setLayout(new GridBagLayout());
            Border emptyBorder
                    = BorderFactory.createEmptyBorder(2, 2, 2, 2);
            Border lineBorder
                    = BorderFactory.createLineBorder(Color.black);
            setBorder(BorderFactory.createCompoundBorder(
                    lineBorder, emptyBorder));

            if (method.equalsIgnoreCase("hash tags")
                    || method.equalsIgnoreCase("people tagged")) {
                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(lookingAt.getPosts().get(postIndex).getDate());
                add(timeLabel, createGbc(3, 0));

                JTextArea captionText = new JTextArea();
                captionText.setText(lookingAt.getPosts().get(postIndex).getCaption());
                captionText.setLineWrap(true);
                captionText.setEditable(false);
                captionText.setSize(120, 120);
                JScrollPane CaptionScroll = new JScrollPane(captionText,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                CaptionScroll.setSize(120, 120);
                add(captionText, createGbc(1, 0));

                final JLabel likeLabel = new JLabel();
                likeLabel.setText("LIKES: " + Integer.toString(
                        lookingAt.getPosts().get(postIndex).getLikes()));
                likeLabel.setSize(100, 21);
                add(likeLabel, createGbc(2, 0));

                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(120, 120);
                try {
                    pictureLabel.setIcon(
                            lookingAt.getPosts().get(postIndex).getImage());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                pictureLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                pictureLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        PostPopUp frame = new PostPopUp(lookingAt,
                                main.getLoggedIn(), postIndex, mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(pictureLabel, createGbc(0, 0));
            } else if (method.equalsIgnoreCase("username")) {
                String username = lookingAt.getUsername();

                JLabel usernameLabel = new JLabel();
                usernameLabel.setText(username);
                usernameLabel.setSize(100, 21);
                usernameLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                usernameLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        RealProfile lookingAt = null;
                        for (int i = 0;
                                i < main.getAllProfiles().size(); i++) {
                            if (main.getAllProfiles().get(i).getUsername()
                                    .equals(username)) {
                                lookingAt = main.getAllProfiles().get(i);
                                break;
                            }
                        }
                        ProfilePopUp popUp = new ProfilePopUp(lookingAt,
                                main.getLoggedIn(), mainWindow);
                        popUp.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(usernameLabel, createGbc(1, 0));

                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(77, 77);
                try {
                    pictureLabel.setIcon(lookingAt.getProfilePic());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                pictureLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                pictureLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        RealProfile lookingAt = null;
                        for (int i = 0; i < main.getAllProfiles().size(); i++) {
                            if (main.getAllProfiles().get(i).getUsername()
                                    .equals(username)) {
                                lookingAt = main.getAllProfiles().get(i);
                            }
                        }
                        ProfilePopUp popUp = new ProfilePopUp(lookingAt,
                                main.getLoggedIn(), mainWindow);
                        popUp.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(pictureLabel, createGbc(0, 0));
            }
        }

        /**
         * Positions the different components
         *
         * @param x x coordinate
         * @param y y coordinate
         * @return returns all of the positioned component
         */
        private GridBagConstraints createGbc(int x, int y) {
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = x;
            gbc.gridy = y;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 1.0;
            gbc.anchor = GridBagConstraints.WEST;

            return gbc;
        }
    }
}
