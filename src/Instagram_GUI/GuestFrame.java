package Instagram_GUI;

import Background_Code.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;

/**
 * This class deals with creating the Guest frame, where users can get a feel
 * for what this application has to offer. They have access to limited features
 * but enough to see what this application can do.
 *
 * @author Jose
 */
public class GuestFrame extends javax.swing.JFrame {

    private JFrame mainWindow;
    private String fileSeparator = System.getProperty("file.separator");
    private String workingDir = System.getProperty("user.dir");
    private String imagesDir =  workingDir + fileSeparator + "src"
            + fileSeparator + "Images" + fileSeparator;
    private int width = (Toolkit.getDefaultToolkit().getScreenSize().width / 2) - 262;
    private int height = (Toolkit.getDefaultToolkit().getScreenSize().height / 2) - 250;

    /**
     * Creates new form GuestFrame
     */
    public GuestFrame() {
        mainWindow = this;
        initComponents();
        this.setTitle("EagleGram");
        this.setLocation(width, height);
        try {
            ImageIcon eaglePicture = new ImageIcon(scaleImage(
                    100, 23, ImageIO.read(new File(imagesDir
                            + "EagleGramTransparent.png"))));
            eagleGramLabel.setIcon(eaglePicture);
        } catch (Exception ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topMenu = new javax.swing.JPanel();
        signInButton = new javax.swing.JButton();
        eagleGramLabel = new javax.swing.JLabel();
        signUpButton = new javax.swing.JButton();
        bottomMenu = new javax.swing.JPanel();
        searchMenuButton = new javax.swing.JButton();
        newPostButton = new javax.swing.JButton();
        notificationsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchInputField = new javax.swing.JTextField();
        searchParameterBox = new javax.swing.JComboBox();
        searchScrollPane = new javax.swing.JScrollPane();
        searchOutputPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(528, 500));
        setMinimumSize(new java.awt.Dimension(528, 500));
        setName("guestFrame"); // NOI18N

        signInButton.setText("Sign In");
        signInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInButtonActionPerformed(evt);
            }
        });

        signUpButton.setText("Sign Up");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topMenuLayout = new javax.swing.GroupLayout(topMenu);
        topMenu.setLayout(topMenuLayout);
        topMenuLayout.setHorizontalGroup(
            topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topMenuLayout.createSequentialGroup()
                .addComponent(signInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addComponent(eagleGramLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        topMenuLayout.setVerticalGroup(
            topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topMenuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eagleGramLabel)
                    .addGroup(topMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(signInButton)
                        .addComponent(signUpButton))))
        );

        searchMenuButton.setText("Search");
        searchMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMenuButtonActionPerformed(evt);
            }
        });

        newPostButton.setText("New Post");
        newPostButton.setEnabled(false);

        notificationsButton.setText("Notifications");
        notificationsButton.setEnabled(false);

        profileButton.setText("Profile");
        profileButton.setEnabled(false);

        homeButton.setText("Home");
        homeButton.setEnabled(false);

        javax.swing.GroupLayout bottomMenuLayout = new javax.swing.GroupLayout(bottomMenu);
        bottomMenu.setLayout(bottomMenuLayout);
        bottomMenuLayout.setHorizontalGroup(
            bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomMenuLayout.createSequentialGroup()
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notificationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(profileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bottomMenuLayout.setVerticalGroup(
            bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomMenuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(bottomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchMenuButton)
                    .addComponent(newPostButton)
                    .addComponent(notificationsButton)
                    .addComponent(profileButton)
                    .addComponent(homeButton)))
        );

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchParameterBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Username", "Hash Tags", "People Tagged"}));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(searchParameterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchParameterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchButton))
        );

        searchOutputPanel.setMaximumSize(new java.awt.Dimension(526, 411));
        searchOutputPanel.setMinimumSize(new java.awt.Dimension(526, 411));

        javax.swing.GroupLayout searchOutputPanelLayout = new javax.swing.GroupLayout(searchOutputPanel);
        searchOutputPanel.setLayout(searchOutputPanelLayout);
        searchOutputPanelLayout.setHorizontalGroup(
            searchOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );
        searchOutputPanelLayout.setVerticalGroup(
            searchOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 411, Short.MAX_VALUE)
        );

        searchScrollPane.setViewportView(searchOutputPanel);
        searchOutputPanel.setLayout(new BoxLayout(searchOutputPanel, BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(bottomMenu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchScrollPane, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Takes the user back to the login frame
     *
     * @param evt when the user clicks the sign in button
     */
    private void signInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInButtonActionPerformed
        main.close();
        Login z = new Login();
        z.setVisible(true);
        super.dispose();
    }//GEN-LAST:event_signInButtonActionPerformed

    /**
     * Takes the user to the sign up frame
     *
     * @param evt when the user clicks the sign up button
     */
    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        main.close();
        SignUpFrame y = new SignUpFrame();
        y.setVisible(true);
        super.dispose();
    }//GEN-LAST:event_signUpButtonActionPerformed

    /**
     * Performs a search for another user or a Post
     *
     * @param evt when the user clicks the search button
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchOutputPanel.removeAll();
        searchOutputPanel.repaint();
        String input = searchInputField.getText();
        String parameter = searchParameterBox.getSelectedItem().toString();

        //add search output
        int postIndex = 0;

        if (parameter.equalsIgnoreCase("Username")){
            for (int i = 0; i < main.getAllProfiles().size(); i++){
                if(main.getAllProfiles().get(i).getUsername().toLowerCase(
                    ).contains(input.toLowerCase())){
                    RealProfile user = main.getAllProfiles().get(i);
                    if (!user.getUsername().equalsIgnoreCase("guest")){
                        postIndex = i;
                        searchOutputPanel.add(new SearchOutputPanel(parameter,
                                    input, user, postIndex));
                    }
                }
            }
        }
        else if (parameter.equalsIgnoreCase("hash tags")) {
            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                for (int j = 0; j
                        < main.getAllProfiles().get(i).getPosts().size(); j++) {
                    for (int x = 0; x < main.getAllProfiles().get(i)
                            .getPosts().get(j).getHashtags().size(); x++) {
                        if (main.getAllProfiles().get(i)
                                .getPosts().get(j).getHashtags().get(x)
                                .equalsIgnoreCase(input)) {
                            RealProfile user = main.getAllProfiles().get(i);
                            postIndex = j;
                            searchOutputPanel.add(new SearchOutputPanel(parameter,
                                    input, user, postIndex));
                        }
                    }
                }
            }
        } else if (parameter.equalsIgnoreCase("people tagged")) {
            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                for (int j = 0; j
                        < main.getAllProfiles().get(i).getPosts().size(); j++) {
                    for (int x = 0; x < main.getAllProfiles().get(i)
                            .getPosts().get(j).getTagged().size(); x++) {
                        if (main.getAllProfiles().get(i)
                                .getPosts().get(j).getTagged().get(x)
                                .equalsIgnoreCase(input)) {
                            RealProfile user = main.getAllProfiles().get(i);
                            postIndex = j;
                            searchOutputPanel.add(new SearchOutputPanel(parameter,
                                    input, user, postIndex));
                        }
                    }
                }
            }
        } else {
            searchOutputPanel.add(new SearchOutputPanel(parameter, input,
                    null, 0));
        }
        searchOutputPanel.revalidate();
        searchOutputPanel.repaint();
        //add search output
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Opens the search page on the guest frame
     *
     * @param evt when the user clicks the search button located on the menu bar
     */
    private void searchMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMenuButtonActionPerformed
        // TODO add your handling code here:
        searchOutputPanel.removeAll();
        searchOutputPanel.repaint();
    }//GEN-LAST:event_searchMenuButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomMenu;
    private javax.swing.JLabel eagleGramLabel;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton newPostButton;
    private javax.swing.JButton notificationsButton;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchInputField;
    private javax.swing.JButton searchMenuButton;
    private javax.swing.JPanel searchOutputPanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox searchParameterBox;
    private javax.swing.JScrollPane searchScrollPane;
    private javax.swing.JButton signInButton;
    private javax.swing.JButton signUpButton;
    private javax.swing.JPanel topMenu;
    // End of variables declaration//GEN-END:variables

    private CurrentProfile main = new CurrentProfile();

    /**
     * Processes an image to be used with a jLabel
     *
     * @param w width of the image
     * @param h height of the image
     * @param img image that is to be processed
     * @return returns the processed image
     * @throws Exception ---
     */
    public static BufferedImage scaleImage(int w, int h, BufferedImage img)
            throws Exception {
        BufferedImage bi;
        bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(img, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }

    /**
     * This class deals with outputting a search panel
     */
    private class SearchOutputPanel extends JPanel {

        /**
         * Constructor for the SearchOutputPanel class
         *
         * @param method the method that this search will use
         * @param searchInput what the user would like to search for
         * @param user the user that is searching
         * @param postIndex the location of the Post that the user is looking
 for
         */
        public SearchOutputPanel(String method,
                String searchInput, RealProfile lookingAt, int postIndex) {
            setLayout(new GridBagLayout());
            Border emptyBorder
                    = BorderFactory.createEmptyBorder(2, 2, 2, 2);
            Border lineBorder
                    = BorderFactory.createLineBorder(Color.black);
            setBorder(BorderFactory.createCompoundBorder(
                    lineBorder, emptyBorder));

            if (method.equalsIgnoreCase("hash tags")
                    || method.equalsIgnoreCase("people tagged")) {
                JLabel timeLabel = new JLabel();
                timeLabel.setSize(100, 21);
                timeLabel.setText(lookingAt.getPosts().get(postIndex).getDate());
                add(timeLabel, createGbc(3, 0));

                JTextArea captionText = new JTextArea();
                captionText.setText(lookingAt.getPosts().get(postIndex).getCaption());
                captionText.setLineWrap(true);
                captionText.setEditable(false);
                captionText.setSize(120, 120);
                JScrollPane CaptionScroll = new JScrollPane(captionText,
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                CaptionScroll.setSize(120, 120);
                add(captionText, createGbc(1, 0));

                final JLabel likeLabel = new JLabel();
                likeLabel.setText("LIKES: " + Integer.toString(
                        lookingAt.getPosts().get(postIndex).getLikes()));
                likeLabel.setSize(100, 21);
                add(likeLabel, createGbc(2, 0));

                JLabel pictureLabel = new JLabel();
                pictureLabel.setSize(120, 120);
                try {
                    pictureLabel.setIcon(
                            lookingAt.getPosts().get(postIndex).getImage());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                pictureLabel.setCursor(Cursor.getPredefinedCursor(
                        Cursor.HAND_CURSOR));
                pictureLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        PostPopUp frame = new PostPopUp(lookingAt,
                                main.getLoggedIn(), postIndex, mainWindow);
                        frame.setVisible(true);
                        mainWindow.setVisible(false);
                    }
                });
                add(pictureLabel, createGbc(0, 0));
            } else if (method.equalsIgnoreCase("username")) {
                    String username = lookingAt.getUsername();

                    JLabel usernameLabel = new JLabel();
                    usernameLabel.setText(username);
                    usernameLabel.setSize(100, 21);
                    usernameLabel.setCursor(Cursor.getPredefinedCursor(
                            Cursor.HAND_CURSOR));
                    usernameLabel.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                            RealProfile current = null;
                            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                                if (main.getAllProfiles().get(i).getUsername()
                                        .equals(username)) {
                                    current = main.getAllProfiles().get(i);
                                }
                            }
                            boolean follows = false;
                            for (int i = 0; i < main.getLoggedIn().getFollowing()
                                    .size(); i++) {
                                if (main.getLoggedIn().getFollowing().get(i)
                                        .getUsername().equals(username)) {
                                    follows = true;
                                    break;
                                }
                            }
                            ProfilePopUp popUp = new ProfilePopUp(current,
                                    main.getLoggedIn(),
                                    mainWindow);
                            popUp.setVisible(true);
                            mainWindow.setVisible(false);
                        }
                    });
                    add(usernameLabel, createGbc(1, 0));

                    JLabel pictureLabel = new JLabel();
                    pictureLabel.setSize(77, 77);
                    try {
                        pictureLabel.setIcon(lookingAt.getProfilePic());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    pictureLabel.setCursor(Cursor.getPredefinedCursor(
                            Cursor.HAND_CURSOR));
                    pictureLabel.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                            RealProfile current = null;
                            for (int i = 0; i < main.getAllProfiles().size(); i++) {
                                if (main.getAllProfiles().get(i).getUsername()
                                        .equals(username)) {
                                    current = main.getAllProfiles().get(i);
                                }
                            }
                            boolean follows = false;
                            for (int i = 0; i < main.getLoggedIn().getFollowing()
                                    .size(); i++) {
                                System.out.println(main.getLoggedIn().getFollowing()
                                        .get(i).getUsername());
                                if (main.getLoggedIn().getFollowing().get(i)
                                        .getUsername().equals(username)) {
                                    follows = true;
                                    break;
                                }
                            }
                            ProfilePopUp popUp = new ProfilePopUp(current,
                                    main.getLoggedIn(),
                                    mainWindow);
                            popUp.setVisible(true);
                            mainWindow.setVisible(false);
                        }
                    });
                    add(pictureLabel, createGbc(0, 0));
            }
        }

        /**
         * Positions the different components
         *
         * @param x x coordinate
         * @param y y coordinate
         * @return returns all of the positioned component
         */
        private GridBagConstraints createGbc(int x, int y) {
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = x;
            gbc.gridy = y;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 1.0;
            gbc.anchor = GridBagConstraints.WEST;

            return gbc;
        }
    }
}
